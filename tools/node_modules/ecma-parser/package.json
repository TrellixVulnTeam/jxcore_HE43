{
  "name": "ecma-parser",
  "version": "0.0.1",
  "description": "Ecmascript Parser",
  "author": {
    "name": "Oguz Bastemur",
    "email": "obastemur@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/obastemur/ecma-parser.git"
  },
  "engines": {
    "node": ">= 0.10.0",
    "jxcore": ">= 0.3.0.1"
  },
  "main": "parser.js",
  "license": "MIT",
  "homepage": "https://github.com/obastemur/ecma-parser",
  "readmeFilename": "README.md",
  "readme": "### Ecmascript Parser\n\nEcmascript, Javascript instruction parser. Tested on popular Javascript modules (i.e. JQuery)\n\n### How it works\n\n- Download [JXcore](https://jxcore.com/downloads)\n- type `jx install ecma-parser`\n- You can also use `npm` directly to install\n\n#### Sample Code:\n```\nvar parser = require('ecma-parser');\n\nvar js_code = \"\\\n  var x = 1;\\\n  var y = 2;\\\n  console.log(x + y);\\\n\";\n\nvar bl = parser.parse(\"test.js\", js_code);\nparser.printBlocks(bl);\n```\n\n#### Output:\n```\n---> ROOT { x: {}, y: {} }\nSPACE (1:1)\nSET_VARIABLE 1:3\nSPACE (1:6)\nWORD: x (new_variable) (1:7)\nSPACE (1:8)\nEQUALS (1:9)\nSPACE (1:10)\nWORD: 1 (number) (1:11)\nSEMI_COLON (1:12)\nSPACE (1:13)\nSET_VARIABLE 1:15\nSPACE (1:18)\nWORD: y (new_variable) (1:19)\nSPACE (1:20)\nEQUALS (1:21)\nSPACE (1:22)\nWORD: 2 (number) (1:23)\nSEMI_COLON (1:24)\nSPACE (1:25)\nWORD: console (1:27)\nDOT (1:34)\nWORD: log (1:35)\nPTS_OPEN (1:38)\nWORD: x (1:39)\nSPACE (1:40)\nPLUS (1:41)\nSPACE (1:42)\nWORD: y (1:43)\nPTS_CLOSE (1:44)\nSEMI_COLON (1:45)\n```\n\n### API\n\n#### .parse (string filename, string source_code)\nParse Javascript code and return instruction blocks\n\n#### .printBlocks (blocks)\nPrint instruction blocks on console\n\n#### .blockToCode (blocks, [optional] filename)\nReturn source code for the instruction block\n\n#### Blocks\n`.variables` : Scope variables  \n`.subs` : Array of sub instructions or blocks  \n`.type` : Instruction type  \n`.index` : Instruction start index  \n`.length` : Length of instruction\n`.repeats` : If `true`, delimiter should repeat on output `.length` times\n`.delimiter` : Instruction identifier  \n`.dataType` : Data type of the instruction block  \n`.rowIndex` : Row index of the instruction  \n`.columnIndex` : Column index of the instruction  \n`.getData()` : Get the string data from the instruction  \n`.getPreviousBlock(noskip)` : Returns previous instruction block (None space, comment, new line or semi colon)  \n`.getNextBlock(noskip)` : Returns previous instruction block (None space, comment, new line or semi colon)  \n\n* set noskip = true to get next or previous block regardless from it's type\n\n### Testing\n\nUse `parse_folder.js` under samples folder. (*nix only)\n\ni.e.\n```\njx samples/parse_folder.js jquery.1.1.min.x.js\n```\n\n### License\nThe MIT License (MIT)\n\nCopyright (c) 2015 Oguz Bastemur\n\n### Contribution\nThis particular project is intended to parse EcmaScript 6 compliant Javascript code. Feel free to contribute \nunder the MIT and intention of this project.\n",
  "gitHead": "823f7645a7903f8af633257474941786afc0d0a6",
  "bugs": {
    "url": "https://github.com/obastemur/ecma-parser/issues"
  },
  "_id": "ecma-parser@0.0.1",
  "scripts": {},
  "_shasum": "c2defa48f166f218a7d2f5a931039303675bd73d",
  "_from": "ecma-parser@"
}
